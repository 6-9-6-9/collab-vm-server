# Makedefs: 
# Common makefile for building the CollabVM Server.

CCFLAGS += -Isrc -Isrc/uriparser

ifeq ($(DEBUG),1)
# debug mode
CCFLAGS += -g -O0 -D_DEBUG -DDEBUG
LDFLAGS = -g
else
# release mode, build with optimizations
CCFLAGS += -O3 -ffast-math
ifneq ($(NO_NATIVE),1)
CCFLAGS += -march=native -mtune=native
endif
LDFLAGS = -s
endif

ifeq ($(JPEG), 1) 
# using JPEG instead of PNG
CCFLAGS += -DUSE_JPEG
endif

# TODO: Remove -fpermissive, all -Wno- and enable -Wall
# as well as maybe moving to c++14 or c++17?
# will need to fix a lot of cosmic-isms
CXXFLAGS = -Wno-deprecated-declarations -Wno-deprecated -Wno-write-strings \
		-fpermissive -std=c++11 $(CCFLAGS) \
		-Isrc/rapidjson -Isrc/Database -Isrc/VMControllers \
		-Isrc/Sockets -Isrc/guacamole -I$(OBJDIR)

# GCC dependency generation
DEPGEN = -MT $@ -MD -MP -MF $(OBJDIR)/$*.d

.PHONY: all clean hardclean

# All objects
OBJS = $(OBJDIR)/Config-odb.o                    \
       $(OBJDIR)/VMSettings-odb.o                \
       $(OBJDIR)/Main.o                          \
       $(OBJDIR)/CollabVM.o                      \
       $(OBJDIR)/Database.o                      \
       $(OBJDIR)/QEMUController.o                \
       $(OBJDIR)/VMController.o                  \
       $(OBJDIR)/QMP.o                           \
       $(OBJDIR)/QMPClient.o                     \
       $(OBJDIR)/AgentClient.o                   \
       $(OBJDIR)/unicode.o                       \
       $(OBJDIR)/error.o                         \
       $(OBJDIR)/guac_clipboard.o                \
       $(OBJDIR)/guac_cursor.o                   \
       $(OBJDIR)/guac_display.o                  \
       $(OBJDIR)/guac_dot_cursor.o               \
       $(OBJDIR)/guac_iconv.o                    \
       $(OBJDIR)/guac_list.o                     \
       $(OBJDIR)/guac_pointer_cursor.o           \
       $(OBJDIR)/guac_rect.o                     \
       $(OBJDIR)/guac_string.o                   \
       $(OBJDIR)/guac_surface.o                  \
       $(OBJDIR)/hash.o                          \
       $(OBJDIR)/id.o                            \
       $(OBJDIR)/palette.o                       \
       $(OBJDIR)/pool.o                          \
       $(OBJDIR)/protocol.o                      \
       $(OBJDIR)/timestamp.o                     \
       $(OBJDIR)/GuacSocket.o                    \
       $(OBJDIR)/GuacWebSocket.o                 \
       $(OBJDIR)/GuacBroadcastSocket.o           \
       $(OBJDIR)/GuacClient.o                    \
       $(OBJDIR)/GuacUser.o                      \
       $(OBJDIR)/GuacVNCClient.o                 \
       $(OBJDIR)/GuacInstructionParser.o         \
       $(OBJDIR)/UriCommon.o                     \
       $(OBJDIR)/UriFile.o                       \
       $(OBJDIR)/UriNormalizeBase.o              \
       $(OBJDIR)/UriParse.o                      \
       $(OBJDIR)/UriResolve.o                    \
       $(OBJDIR)/UriCompare.o                    \
       $(OBJDIR)/UriIp4Base.o                    \
       $(OBJDIR)/UriNormalize.o                  \
       $(OBJDIR)/UriQuery.o                      \
       $(OBJDIR)/UriShorten.o                    \
       $(OBJDIR)/UriEscape.o                     \
       $(OBJDIR)/UriIp4.o                        \
       $(OBJDIR)/UriParseBase.o                  \
       $(OBJDIR)/UriRecompose.o

# Add supporting code to the objects list
# for JPEG
ifeq ($(JPEG), 1)
OBJS += $(OBJDIR)/cairo_jpg.o
endif

# Set the VPATH to all of the possible source tree locations.
# This decomplicates a lot of this file and makes it easier to understand
VPATH := src/             \
	$(OBJDIR)         \
        src/uriparser     \
        src/Database      \
        src/Sockets       \
        src/VMControllers \
        src/guacamole     \
        src/guacamole/vnc \ 


all: $(BINDIR)/ $(OBJDIR)/ $(BINDIR)/collab-vm-server

$(BINDIR)/:
	@mkdir -p $@

$(OBJDIR)/:
	mkdir -p $@

# meta-rules

clean:
	$(info Cleaning "$(BINDIR)/")
	$(RM) -r $(BINDIR)
	$(info Cleaning "$(OBJDIR)/")
	$(RM) -r $(OBJDIR)/*.o $(OBJDIR)/*.cxx $(OBJDIR)/*.hxx $(OBJDIR)/*.ixx

# WARNING: this will reset dependency files too
hardclean:
	$(info Cleaning "$(BINDIR)/")
	$(RM) -r $(BINDIR)
	$(info Cleaning "$(OBJDIR)/")
	$(RM) -r $(OBJDIR)

# Link rules

$(BINDIR)/collab-vm-server: $(OBJS)
	$(info Linking executable $@)
	$(CXX) $(OBJS) $(LIBS) $(LDFLAGS) -o $@

# Source generation rules

$(OBJDIR)/Config-odb.cxx: src/Database/Config.h
	$(info Generating ODB source file $@)
	$(ODB) -d sqlite -o $(OBJDIR) -s -q $<

$(OBJDIR)/VMSettings-odb.cxx: src/Database/VMSettings.h
	$(info Generating ODB source file $@)
	$(ODB) -d sqlite -o $(OBJDIR) -s -q $<

# C/C++ compile rules

$(OBJDIR)/%.o: %.cpp
	$(info Compiling C++ source file $<)
	$(CXX) -c $< $(CXXFLAGS) -o $@ 

$(OBJDIR)/%.o: %.cxx
	$(info Compiling C++ source file $<)
	$(CXX) -c $< $(CXXFLAGS) -MT $@ -MD -MP -MF $(OBJDIR)/$*.d -o $@

$(OBJDIR)/%.o: %.c
	$(info Compiling C source file $<)
	$(CC) -c $< $(CCFLAGS) -MT $@ -MD -MP -MF $(OBJDIR)/$*.d -o $@


# Explicit dependencies to help aid make when doing a compile of the source tree with multiple jobs going at once.
# no matter what order this file ends up, it will be after the dependencies have been generated and compiled
# meaning make -j17 (example) will now compile properly every single time

src/Database/Database.cpp: $(OBJDIR)/Config-odb.cxx $(OBJDIR)/VMSettings-odb.cxx

# include dependencies
-include $(wildcard $(OBJDIR)/*.d)

# Little fun make trick! This will expand usually to
# ".SILENT:" which means make rules won't output commands
# but when VERBOSE is set to anything, it will expand to
# something meaningless, allowing commands to output.
$VERBOSE.SILENT:
